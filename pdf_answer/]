from huggingface_hub import login
from langchain_community.llms.huggingface_hub import HuggingFaceHub
import os
from langchain_text_splitters import TokenTextSplitter
from transformers import pipeline 

os.environ['HUGGINGFACEHUB_API_TOKEN'] = "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"
login("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")

gemma7b = HuggingFaceHub(repo_id='google/gemma-1.1-7b-it')
text_summarizer = HuggingFaceHub(repo_id='Falconsai/text_summarization')

text_splitter = TokenTextSplitter(chunk_size=3000, chunk_overlap=0) 

def generate_gemma7b_response(context, instruction, question, response_key):
    template = f"""
    ###context:{context},
    ###instruction:{instruction}
    ###length: short
    ###question:{question},
    {response_key}:
    """
    response = gemma7b(template, temperature=0.3, max_new_token=1000)
    return response.rsplit(response_key + ":", 1)[-1].strip()

def gemma7b_answer(context, question):
    instruction = "Please provide your response based solely on the information provided in the context. If the answer is not in the context, respond with 'I am not aware about it' and nothing else."
    return generate_gemma7b_response(context, instruction, question, "###answer")

def gemma7b_hint(context, question):
    instruction = "Provide a helpful hint related to the question without revealing the full answer. The hint should guide the user toward the solution without explicitly stating it."
    return generate_gemma7b_response(context, instruction, question, "###hint")

def gemma7b_provide_feedback(context, question, user_answer):
    instruction = """
    Find the correct answer from the context and compare it with the user's answer.
    Provide a brief explanation of any missing or incorrect points in the user's answer under the section '###feedback'.
    Do not provide the correct answer explicitly.
    """
    return generate_gemma7b_response(context, f"User Answer: {user_answer}", instruction, "###feedback")

def gemma7b_check_verdict(context, question, user_answer, feedback):
    instruction = """
    Based on the context and the provided feedback, determine if the user's answer conveys the same meaning as the correct answer.
    Respond with either 'Correct' or 'Incorrect' under the section '###verdict'.
    """
    response = generate_gemma7b_response(context, f"User Answer: {user_answer}\nFeedback: {feedback}", instruction, "###verdict")

    parts = response.rsplit("###verdict", 1)
    verdict = parts[1].strip() if len(parts) > 1 else ""

    return verdict


def text_summarize(input_text):
    response = text_summarizer(str(input_text))
    return response
